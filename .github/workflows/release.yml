name: release

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - "llvmorg-*"
  workflow_dispatch:
    inputs:
      upstream-tagname:
        type: text
        required: true
        description: 'tag name to checkout from llvmorg'
        default: 'llvmorg-13.0.1'

jobs:
  create_release:
    name: Build llvm on Windows
    runs-on: windows-latest
    steps:
    - name: Install dependency
      uses: crazy-max/ghaction-chocolatey@v1
      with:
        args: install cmake ninja vswhere

    - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
      with:
        sdk-version: 19041

    - name: Checkout by pushing tags
      if: ${{ github.event_name == 'push' }}
      run: git clone --branch ${{ github.ref_name }} --depth 1 https://github.com/llvm/llvm-project.git

    - name: Checkout by workflow dispatch
      if: ${{ github.event_name == 'workflow_dispatch' }}
      run: git clone --branch ${{ github.event.inputs.upstream-tagname }} --depth 1 https://github.com/llvm/llvm-project.git

    - name: Build llvm
      run: |
        $vsPath = (vswhere -latest -property installationPath)
        Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
        Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64 -host_arch=x64 -winsdk=10.0.19041.0"
        $Env:CC = "clang-cl"
        $Env:CXX = "clang-cl"
        $cmake_sys_ver = "10.0.19041.0"
        cmake -Bbuild -GNinja "-DCMAKE_SYSTEM_VERSION=$cmake_sys_ver" -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL -DCMAKE_BUILD_TYPE=Release -DCPACK_GENERATOR=ZIP "-DCMAKE_INSTALL_PREFIX=$pwd\\prefix" -DLLVM_TARGETS_TO_BUILD="X86" -DLLVM_ENABLE_PROJECTS="lld;clang;clang-tools-extra" llvm-project\\llvm
        cmake --build build

    - name: Package llvm
      run: |
        cmake --build build --target package

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: WasmEdge ${{ github.ref }}
        draft: true
        prerelease: true

    - name: Get LLVM version
      id: get_version
      run: |
        version=$(echo ${{ github.ref_name }} | cut -d- -f2)
        echo "::set-output name=version::$version"
    - name: Upload LLVM ${{ steps.get_version.outputs.version }} zip package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/LLVM-${{ steps.get_version.outputs.version }}-win64.zip
        asset_name: LLVM-${{ steps.get_version.outputs.version }}-win64.zip
        asset_content_type: application/zip

